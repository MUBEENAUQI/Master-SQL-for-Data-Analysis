--------------------------------------------------------------------------
-- Level 1 - SQL code being used during the training. 
-- by Idan Gabrieli. 
--------------------------------------------------------------------------
/* Section: SQL - Creating Databases, Schemas and Tables */
--------------------------------------------------------------------------
-- Creating the netflix and imdb schemas, tables and loading the data from files */
CREATE SCHEMA netflix;
CREATE SCHEMA imdb;
----------------------------------
CREATE TABLE netflix.titles
( 
	title_id varchar(10) PRIMARY KEY,
	title varchar(200),
	title_type varchar(5),
	description varchar(2000), 
	release_year integer,
	age_certification varchar(10),
	runtime smallint,
	genres varchar(30) ARRAY[10],
	production_countries varchar(10) ARRAY[10],
	seasons smallint,
	imdb_score decimal(2,1),
	imdb_votes integer
);
----------------------------------
CREATE TABLE netflix.credits 
(
    person_id integer,
    title_id varchar(10) REFERENCES netflix.titles(title_id),
    name varchar(300), 
    character varchar(300),
    role varchar(10)
);
----------------------------------
COPY netflix.titles (title_id, title, title_type, description, release_year, age_certification, runtime, genres, production_countries, seasons, imdb_score, imdb_votes) 
FROM ‘c:\data\netflix\titles.csv’
DELIMITER ‘,’
CSV HEADER;
----------------------------------
COPY netflix.credits (person_id, title_id, name, character, role) 
FROM ‘c:\data\netflix\credits.csv’
DELIMITER ‘,’
CSV HEADER;

--------------------------------------------------------------------------
/* Section: SQL - Retrieving Data with Queries */
--------------------------------------------------------------------------
-- get all columns from a table 
SELECT * FROM netflix.titles;
-- get specific columns from a table 
SELECT title_id, title, title_type, description, release_year FROM netflix.titles;
/* Notes 
----------------------------------
1.	SELECT is an example of a key word in SQL
2.	After the SELECT command, we list down the required columns (identifiers) they are used to identify specific names of columns. 
3.	Key words and identifiers are case insensitive, but the typical format is to write key words in upper case and identifiers in lower cases. 
4.	There is a second kind of identifier: a quoted identifier - can contain almost any character(for example - column name with two words with space). 
----------------------------------*/
/* LIMIT */
SELECT * 
FROM netflix.movies
LIMIT 10;
----------------------------------
/* Filtering Conditions (WHERE) */
-- THINK about optimized filters when building queries 
SELECT * 
FROM netflix.titles 
WHERE title_type = 'MOVIE'
-- Non-matching 
SELECT * 
from netflix.titles 
WHERE type <> ‘MOVIE’;
-- Range of values 
SELECT * 
from netflix.titles 
WHERE release_year BETWEEN 1980 AND 1990
-- Filtering no values
SELECT title, title_type, release_year, seasons
from netflix.titles 
WHERE seasons IS NOT NULL;
----------------------------------
-- AND Operator 
SELECT title, title_type, release_year, imdb_score 
FROM netflix.titles 
WHERE 
	title_type = 'MOVIE' AND
	release_year >= 2000 AND
	imdb_score >= 8.0;
-------------------------------------
-- OR Operator 
SELECT title, title_type, runtime, release_year
FROM netflix.titles 
WHERE 
	runtime <= 30 OR release_year > 1980;
-------------------------------------
-- Order of Operations
SELECT title, title_type, runtime, release_year
FROM netflix.titles 
WHERE 
     title_type = 'SHOW' AND release_year = 2000 OR runtime>100;
--   title_type = 'SHOW' AND (runtime>100 OR release_year = 2000)
-------------------------------------
-- NOT/IN 
SELECT title, title_type, runtime, release_year
FROM netflix.titles 
WHERE 
   release_year IN (2000, 2004, 2010);
-------------------------------------
-- Alias for columns 
SELECT title, title_type, runtime AS movie_length, (release_year + 1) AS updated_year
--SELECT title, title_type, runtime movie_length, (release_year + 1) updated_year
FROM netflix.titles;
-- Alias for tables --
SELECT t1.title, title_type, runtime 
FROM netflix.titles AS t1;
-----------------------------------------
-- Searching Patterns (Wildcards) 
-----------------------------------------
-- finds all movies or TV shows with a title that begins with the prefix “The”
SELECT title, title_type
FROM netflix.titles 
WHERE title LIKE 'The%';
-- finds all movies or TV shows with a title that has the character “a” in the second letter 
-- and are ending with the letters “ver”
SELECT title, title_type
FROM netflix.titles 
WHERE title LIKE '_a%ver'
-- all movies or TV shows with a title that includes the “Top” word somewhere inside the title
SELECT title, title_type
FROM netflix.titles 
WHERE title LIKE '%Top%';
-----------------------------------------
-- Distinct Values (DISTINCT) 
-----------------------------------------
-- check the distinct list age_certification for movies or TV shows
SELECT DISTINCT age_certification 
FROM netflix.titles;
-- ignore NULL
SELECT DISTINCT age_certification 
FROM netflix.titles
WHERE age_certification IS NOT NULL
-- distinct values for the title_type 
SELECT DISTINCT title_type
FROM netflix.titles;
-- two or more columns in a SELECT DISTINCT statement
SELECT DISTINCT age_certification, title_type
FROM netflix.titles
WHERE age_certification IS NOT NULL
-- Distinct and Count
SELECT COUNT(DISTINCT age_certification) AS unique_agecerti
FROM netflix.titles;
WHERE age_certification IS NOT NULL
-----------------------------------------
-- Sorting Rows (ORDER BY)
-----------------------------------------
-- selects all titles sorted by the "release_year" column
SELECT title, release_year
FROM netflix.titles
ORDER BY release_year;
-- selects all titles sorted by the "release_year" and the "runtime" column
SELECT  title, release_year, runtime
FROM netflix.titles
ORDER BY release_year, runtime ;
-- use a shortcut - column position after the select key word
SELECT  title, release_year, runtime
FROM netflix.titles
ORDER BY 2,3;
-- filter only movies and sort them in descending order based on the imdb score column
SELECT  title, imdb_score
FROM netflix.titles
WHERE title_type = 'MOVIE' AND imdb_score IS NOT NULL
ORDER BY imdb_score DESC;
-----------------------------------------
-- Grouping Rows (GROUP BY and HAVING)
-----------------------------------------
-- Single-Column Grouping 
-----------------------------------------
-- grouping the rows based on tite_type that there release_year is more then 2000 
-- and calculating the average imdb_score for each title_type group
SELECT title_type, AVG(imdb_score)
FROM netflix.titles
WHERE release_year >= 2000
GROUP BY title_type;
-- calculate the number of actors for each film or tv show
SELECT title_id,  count(distinct person_id) as unique_actors
FROM netflix.credits 
WHERE role = 'ACTOR'
GROUP BY title_id
ORDER BY unique_actors DESC;
-- add the title name
SELECT c1.title_id,  t1.title, count(distinct c1.person_id) as unique_actors
FROM netflix.credits as c1, netflix.titles as t1
WHERE 
    role = 'ACTOR' AND c1.title_id = t1.title_id
GROUP BY c1.title_id, t1.title 
ORDER BY unique_actors DESC;
-- count the number of films or TV shows each actor was part of the cast
SELECT name, count(title_id) as num_part_of_cast
FROM netflix.credits 
WHERE 
    role = 'ACTOR' 
GROUP BY name
ORDER BY num_part_of_cast DESC;
-----------------------------------------
-- Multicolumn Grouping Grouping 
-----------------------------------------
-- calculate the maximum imdb score per year for each title type
SELECT title_type, release_year, MAX(imdb_score) as max_imdb_score
FROM netflix.titles
GROUP BY title_type, release_year 
ORDER BY title_type, release_year;
-----------------------------------------
-- HAVING
-----------------------------------------
-- filter out groups with null value in the maximum imdb_score
SELECT title_type, release_year, MAX(imdb_score) as max_imdb_score
FROM netflix.titles
GROUP BY title_type, release_year 
HAVING MAX(imdb_score) IS NOT NULL 
ORDER BY title_type, release_year;
-----------------------------------------
-- Database Dictionary 
-----------------------------------------
-- retrieve the names of all the tables in the netflix schema
SELECT table_schema, table_name, table_type
FROM information_schema.tables
WHERE table_schema = 'netflix'
ORDER BY 1;
-- check the columns information in specific table via the columns view
SELECT *
FROM information_schema.columns
WHERE table_schema = 'netflix' AND table_name = 'titles';
-- retrieves all of the constraints in the netflix schema
SELECT constraint_name, table_name, constraint_type
FROM information_schema.table_constraints 
WHERE table_schema = 'netflix' AND table_name = 'titles';
----------------------------------
/* END OF FILE */
--------------------------------------------------------------------------